// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppThread.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// distmx_cluster_tree_uniform
Rcpp::RObject distmx_cluster_tree_uniform(const std::string file, const Rcpp::CharacterVector& seqnames, const float dmin, const float dmax, const float dstep, const std::string output_type);
RcppExport SEXP _optimotu_distmx_cluster_tree_uniform(SEXP fileSEXP, SEXP seqnamesSEXP, SEXP dminSEXP, SEXP dmaxSEXP, SEXP dstepSEXP, SEXP output_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type seqnames(seqnamesSEXP);
    Rcpp::traits::input_parameter< const float >::type dmin(dminSEXP);
    Rcpp::traits::input_parameter< const float >::type dmax(dmaxSEXP);
    Rcpp::traits::input_parameter< const float >::type dstep(dstepSEXP);
    Rcpp::traits::input_parameter< const std::string >::type output_type(output_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(distmx_cluster_tree_uniform(file, seqnames, dmin, dmax, dstep, output_type));
    return rcpp_result_gen;
END_RCPP
}
// distmx_cluster_tree_array
Rcpp::RObject distmx_cluster_tree_array(const std::string file, const Rcpp::CharacterVector& seqnames, const std::vector<double>& thresholds, const std::string output_type);
RcppExport SEXP _optimotu_distmx_cluster_tree_array(SEXP fileSEXP, SEXP seqnamesSEXP, SEXP thresholdsSEXP, SEXP output_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type seqnames(seqnamesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type thresholds(thresholdsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type output_type(output_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(distmx_cluster_tree_array(file, seqnames, thresholds, output_type));
    return rcpp_result_gen;
END_RCPP
}
// distmx_cluster_tree_cached
Rcpp::RObject distmx_cluster_tree_cached(const std::string file, const Rcpp::CharacterVector& seqnames, const std::vector<double>& thresholds, const double precision, const std::string output_type);
RcppExport SEXP _optimotu_distmx_cluster_tree_cached(SEXP fileSEXP, SEXP seqnamesSEXP, SEXP thresholdsSEXP, SEXP precisionSEXP, SEXP output_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type seqnames(seqnamesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type thresholds(thresholdsSEXP);
    Rcpp::traits::input_parameter< const double >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< const std::string >::type output_type(output_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(distmx_cluster_tree_cached(file, seqnames, thresholds, precision, output_type));
    return rcpp_result_gen;
END_RCPP
}
// distmx_cluster_mtree_uniform
Rcpp::List distmx_cluster_mtree_uniform(const std::string file, const Rcpp::CharacterVector& seqnames, const std::string& output_type, const double dmin, const double dmax, const double dstep, const Rcpp::ListOf<Rcpp::CharacterVector>& preclust, const size_t threads);
RcppExport SEXP _optimotu_distmx_cluster_mtree_uniform(SEXP fileSEXP, SEXP seqnamesSEXP, SEXP output_typeSEXP, SEXP dminSEXP, SEXP dmaxSEXP, SEXP dstepSEXP, SEXP preclustSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type seqnames(seqnamesSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type output_type(output_typeSEXP);
    Rcpp::traits::input_parameter< const double >::type dmin(dminSEXP);
    Rcpp::traits::input_parameter< const double >::type dmax(dmaxSEXP);
    Rcpp::traits::input_parameter< const double >::type dstep(dstepSEXP);
    Rcpp::traits::input_parameter< const Rcpp::ListOf<Rcpp::CharacterVector>& >::type preclust(preclustSEXP);
    Rcpp::traits::input_parameter< const size_t >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(distmx_cluster_mtree_uniform(file, seqnames, output_type, dmin, dmax, dstep, preclust, threads));
    return rcpp_result_gen;
END_RCPP
}
// distmx_cluster_mtree_array
Rcpp::List distmx_cluster_mtree_array(const std::string file, const Rcpp::CharacterVector& seqnames, const std::string& output_type, const std::vector<double> thresholds, const Rcpp::ListOf<Rcpp::CharacterVector>& preclust, const size_t threads);
RcppExport SEXP _optimotu_distmx_cluster_mtree_array(SEXP fileSEXP, SEXP seqnamesSEXP, SEXP output_typeSEXP, SEXP thresholdsSEXP, SEXP preclustSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type seqnames(seqnamesSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type output_type(output_typeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type thresholds(thresholdsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::ListOf<Rcpp::CharacterVector>& >::type preclust(preclustSEXP);
    Rcpp::traits::input_parameter< const size_t >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(distmx_cluster_mtree_array(file, seqnames, output_type, thresholds, preclust, threads));
    return rcpp_result_gen;
END_RCPP
}
// distmx_cluster_mtree_cached
Rcpp::List distmx_cluster_mtree_cached(const std::string file, const Rcpp::CharacterVector& seqnames, const std::string& output_type, const std::vector<double> thresholds, const double precision, const Rcpp::ListOf<Rcpp::CharacterVector>& preclust, const size_t threads);
RcppExport SEXP _optimotu_distmx_cluster_mtree_cached(SEXP fileSEXP, SEXP seqnamesSEXP, SEXP output_typeSEXP, SEXP thresholdsSEXP, SEXP precisionSEXP, SEXP preclustSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type seqnames(seqnamesSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type output_type(output_typeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type thresholds(thresholdsSEXP);
    Rcpp::traits::input_parameter< const double >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< const Rcpp::ListOf<Rcpp::CharacterVector>& >::type preclust(preclustSEXP);
    Rcpp::traits::input_parameter< const size_t >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(distmx_cluster_mtree_cached(file, seqnames, output_type, thresholds, precision, preclust, threads));
    return rcpp_result_gen;
END_RCPP
}
// confusion_matrix
Rcpp::DataFrame confusion_matrix(const Rcpp::IntegerMatrix k, const Rcpp::IntegerVector c, const int threads);
RcppExport SEXP _optimotu_confusion_matrix(SEXP kSEXP, SEXP cSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix >::type k(kSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type c(cSEXP);
    Rcpp::traits::input_parameter< const int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(confusion_matrix(k, c, threads));
    return rcpp_result_gen;
END_RCPP
}
// distmx_cluster_single
Rcpp::RObject distmx_cluster_single(const std::string file, const Rcpp::CharacterVector seqnames, const Rcpp::List threshold_config, const Rcpp::List method_config, const Rcpp::List parallel_config, const std::string output_type);
RcppExport SEXP _optimotu_distmx_cluster_single(SEXP fileSEXP, SEXP seqnamesSEXP, SEXP threshold_configSEXP, SEXP method_configSEXP, SEXP parallel_configSEXP, SEXP output_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type seqnames(seqnamesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type threshold_config(threshold_configSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type method_config(method_configSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type parallel_config(parallel_configSEXP);
    Rcpp::traits::input_parameter< const std::string >::type output_type(output_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(distmx_cluster_single(file, seqnames, threshold_config, method_config, parallel_config, output_type));
    return rcpp_result_gen;
END_RCPP
}
// distmx_cluster_multi
Rcpp::RObject distmx_cluster_multi(const std::string file, const Rcpp::CharacterVector seqnames, const Rcpp::ListOf<Rcpp::CharacterVector> which, const Rcpp::List threshold_config, const Rcpp::List method_config, const Rcpp::List parallel_config, const std::string output_type);
RcppExport SEXP _optimotu_distmx_cluster_multi(SEXP fileSEXP, SEXP seqnamesSEXP, SEXP whichSEXP, SEXP threshold_configSEXP, SEXP method_configSEXP, SEXP parallel_configSEXP, SEXP output_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector >::type seqnames(seqnamesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::ListOf<Rcpp::CharacterVector> >::type which(whichSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type threshold_config(threshold_configSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type method_config(method_configSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type parallel_config(parallel_configSEXP);
    Rcpp::traits::input_parameter< const std::string >::type output_type(output_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(distmx_cluster_multi(file, seqnames, which, threshold_config, method_config, parallel_config, output_type));
    return rcpp_result_gen;
END_RCPP
}
// intersect_length
int intersect_length(const std::vector<int>& c, const std::vector<int>& k);
RcppExport SEXP _optimotu_intersect_length(SEXP cSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(intersect_length(c, k));
    return rcpp_result_gen;
END_RCPP
}
// intersect_length_string
int intersect_length_string(const std::vector<std::string>& c, const std::vector<std::string>& k);
RcppExport SEXP _optimotu_intersect_length_string(SEXP cSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(intersect_length_string(c, k));
    return rcpp_result_gen;
END_RCPP
}
// inner_fmeasure
double inner_fmeasure(const std::vector<int>& cj, const Rcpp::ListOf<Rcpp::IntegerVector>& kpartition, const std::vector<int>& nk);
RcppExport SEXP _optimotu_inner_fmeasure(SEXP cjSEXP, SEXP kpartitionSEXP, SEXP nkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type cj(cjSEXP);
    Rcpp::traits::input_parameter< const Rcpp::ListOf<Rcpp::IntegerVector>& >::type kpartition(kpartitionSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type nk(nkSEXP);
    rcpp_result_gen = Rcpp::wrap(inner_fmeasure(cj, kpartition, nk));
    return rcpp_result_gen;
END_RCPP
}
// fmeasure_list
Rcpp::NumericVector fmeasure_list(Rcpp::ListOf<Rcpp::ListOf<Rcpp::IntegerVector>> k, Rcpp::ListOf<Rcpp::IntegerVector> c, size_t ncpu);
RcppExport SEXP _optimotu_fmeasure_list(SEXP kSEXP, SEXP cSEXP, SEXP ncpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::ListOf<Rcpp::ListOf<Rcpp::IntegerVector>> >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::ListOf<Rcpp::IntegerVector> >::type c(cSEXP);
    Rcpp::traits::input_parameter< size_t >::type ncpu(ncpuSEXP);
    rcpp_result_gen = Rcpp::wrap(fmeasure_list(k, c, ncpu));
    return rcpp_result_gen;
END_RCPP
}
// fmeasure_matrix
Rcpp::NumericVector fmeasure_matrix(Rcpp::IntegerMatrix k, Rcpp::IntegerVector c, size_t ncpu);
RcppExport SEXP _optimotu_fmeasure_matrix(SEXP kSEXP, SEXP cSEXP, SEXP ncpuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type c(cSEXP);
    Rcpp::traits::input_parameter< size_t >::type ncpu(ncpuSEXP);
    rcpp_result_gen = Rcpp::wrap(fmeasure_matrix(k, c, ncpu));
    return rcpp_result_gen;
END_RCPP
}
// mutual_information
Rcpp::NumericVector mutual_information(const Rcpp::IntegerMatrix k, const Rcpp::IntegerVector c, int threads);
RcppExport SEXP _optimotu_mutual_information(SEXP kSEXP, SEXP cSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix >::type k(kSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(mutual_information(k, c, threads));
    return rcpp_result_gen;
END_RCPP
}
// adjusted_mutual_information
Rcpp::DataFrame adjusted_mutual_information(const Rcpp::IntegerMatrix k, const Rcpp::IntegerVector c, int threads);
RcppExport SEXP _optimotu_adjusted_mutual_information(SEXP kSEXP, SEXP cSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix >::type k(kSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(adjusted_mutual_information(k, c, threads));
    return rcpp_result_gen;
END_RCPP
}
// distmx_cluster_matrix2_uniform
Rcpp::IntegerMatrix distmx_cluster_matrix2_uniform(const std::string file, const Rcpp::CharacterVector& seqnames, const float dmin, const float dmax, const float dstep, const int threads, const bool do_binary_search, const int fill_method);
RcppExport SEXP _optimotu_distmx_cluster_matrix2_uniform(SEXP fileSEXP, SEXP seqnamesSEXP, SEXP dminSEXP, SEXP dmaxSEXP, SEXP dstepSEXP, SEXP threadsSEXP, SEXP do_binary_searchSEXP, SEXP fill_methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type seqnames(seqnamesSEXP);
    Rcpp::traits::input_parameter< const float >::type dmin(dminSEXP);
    Rcpp::traits::input_parameter< const float >::type dmax(dmaxSEXP);
    Rcpp::traits::input_parameter< const float >::type dstep(dstepSEXP);
    Rcpp::traits::input_parameter< const int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_binary_search(do_binary_searchSEXP);
    Rcpp::traits::input_parameter< const int >::type fill_method(fill_methodSEXP);
    rcpp_result_gen = Rcpp::wrap(distmx_cluster_matrix2_uniform(file, seqnames, dmin, dmax, dstep, threads, do_binary_search, fill_method));
    return rcpp_result_gen;
END_RCPP
}
// distmx_cluster_matrix2_array
Rcpp::IntegerMatrix distmx_cluster_matrix2_array(const std::string file, const Rcpp::CharacterVector& seqnames, const std::vector<double>& thresholds, const int threads, const bool do_binary_search, const int fill_method);
RcppExport SEXP _optimotu_distmx_cluster_matrix2_array(SEXP fileSEXP, SEXP seqnamesSEXP, SEXP thresholdsSEXP, SEXP threadsSEXP, SEXP do_binary_searchSEXP, SEXP fill_methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type seqnames(seqnamesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type thresholds(thresholdsSEXP);
    Rcpp::traits::input_parameter< const int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_binary_search(do_binary_searchSEXP);
    Rcpp::traits::input_parameter< const int >::type fill_method(fill_methodSEXP);
    rcpp_result_gen = Rcpp::wrap(distmx_cluster_matrix2_array(file, seqnames, thresholds, threads, do_binary_search, fill_method));
    return rcpp_result_gen;
END_RCPP
}
// distmx_cluster_matrix2_cached
Rcpp::IntegerMatrix distmx_cluster_matrix2_cached(const std::string file, const Rcpp::CharacterVector& seqnames, const std::vector<double>& thresholds, const double precision, const int threads, const bool do_binary_search, const int fill_method);
RcppExport SEXP _optimotu_distmx_cluster_matrix2_cached(SEXP fileSEXP, SEXP seqnamesSEXP, SEXP thresholdsSEXP, SEXP precisionSEXP, SEXP threadsSEXP, SEXP do_binary_searchSEXP, SEXP fill_methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type seqnames(seqnamesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type thresholds(thresholdsSEXP);
    Rcpp::traits::input_parameter< const double >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< const int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_binary_search(do_binary_searchSEXP);
    Rcpp::traits::input_parameter< const int >::type fill_method(fill_methodSEXP);
    rcpp_result_gen = Rcpp::wrap(distmx_cluster_matrix2_cached(file, seqnames, thresholds, precision, threads, do_binary_search, fill_method));
    return rcpp_result_gen;
END_RCPP
}
// distmx_cluster_imatrix_uniform
Rcpp::IntegerMatrix distmx_cluster_imatrix_uniform(const std::string file, const Rcpp::CharacterVector& seqnames, const float dmin, const float dmax, const float dstep);
RcppExport SEXP _optimotu_distmx_cluster_imatrix_uniform(SEXP fileSEXP, SEXP seqnamesSEXP, SEXP dminSEXP, SEXP dmaxSEXP, SEXP dstepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type seqnames(seqnamesSEXP);
    Rcpp::traits::input_parameter< const float >::type dmin(dminSEXP);
    Rcpp::traits::input_parameter< const float >::type dmax(dmaxSEXP);
    Rcpp::traits::input_parameter< const float >::type dstep(dstepSEXP);
    rcpp_result_gen = Rcpp::wrap(distmx_cluster_imatrix_uniform(file, seqnames, dmin, dmax, dstep));
    return rcpp_result_gen;
END_RCPP
}
// distmx_cluster_imatrix_array
Rcpp::IntegerMatrix distmx_cluster_imatrix_array(const std::string file, const Rcpp::CharacterVector& seqnames, const std::vector<double>& thresholds);
RcppExport SEXP _optimotu_distmx_cluster_imatrix_array(SEXP fileSEXP, SEXP seqnamesSEXP, SEXP thresholdsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type seqnames(seqnamesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type thresholds(thresholdsSEXP);
    rcpp_result_gen = Rcpp::wrap(distmx_cluster_imatrix_array(file, seqnames, thresholds));
    return rcpp_result_gen;
END_RCPP
}
// distmx_cluster_imatrix_cached
Rcpp::IntegerMatrix distmx_cluster_imatrix_cached(const std::string file, const Rcpp::CharacterVector& seqnames, const std::vector<double>& thresholds, const double precision);
RcppExport SEXP _optimotu_distmx_cluster_imatrix_cached(SEXP fileSEXP, SEXP seqnamesSEXP, SEXP thresholdsSEXP, SEXP precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type seqnames(seqnamesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type thresholds(thresholdsSEXP);
    Rcpp::traits::input_parameter< const double >::type precision(precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(distmx_cluster_imatrix_cached(file, seqnames, thresholds, precision));
    return rcpp_result_gen;
END_RCPP
}
// distmx_cluster_matrix_uniform
Rcpp::IntegerMatrix distmx_cluster_matrix_uniform(const std::string file, const Rcpp::CharacterVector& seqnames, const float dmin, const float dmax, const float dstep, const int threads, const int minsplit);
RcppExport SEXP _optimotu_distmx_cluster_matrix_uniform(SEXP fileSEXP, SEXP seqnamesSEXP, SEXP dminSEXP, SEXP dmaxSEXP, SEXP dstepSEXP, SEXP threadsSEXP, SEXP minsplitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type seqnames(seqnamesSEXP);
    Rcpp::traits::input_parameter< const float >::type dmin(dminSEXP);
    Rcpp::traits::input_parameter< const float >::type dmax(dmaxSEXP);
    Rcpp::traits::input_parameter< const float >::type dstep(dstepSEXP);
    Rcpp::traits::input_parameter< const int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< const int >::type minsplit(minsplitSEXP);
    rcpp_result_gen = Rcpp::wrap(distmx_cluster_matrix_uniform(file, seqnames, dmin, dmax, dstep, threads, minsplit));
    return rcpp_result_gen;
END_RCPP
}
// distmx_cluster_matrix_array
Rcpp::IntegerMatrix distmx_cluster_matrix_array(const std::string file, const Rcpp::CharacterVector& seqnames, const std::vector<double>& thresholds, const int threads, const int minsplit);
RcppExport SEXP _optimotu_distmx_cluster_matrix_array(SEXP fileSEXP, SEXP seqnamesSEXP, SEXP thresholdsSEXP, SEXP threadsSEXP, SEXP minsplitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type seqnames(seqnamesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type thresholds(thresholdsSEXP);
    Rcpp::traits::input_parameter< const int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< const int >::type minsplit(minsplitSEXP);
    rcpp_result_gen = Rcpp::wrap(distmx_cluster_matrix_array(file, seqnames, thresholds, threads, minsplit));
    return rcpp_result_gen;
END_RCPP
}
// distmx_cluster_matrix_cached
Rcpp::IntegerMatrix distmx_cluster_matrix_cached(const std::string file, const Rcpp::CharacterVector& seqnames, const std::vector<double>& thresholds, const double precision, const int threads, const int minsplit);
RcppExport SEXP _optimotu_distmx_cluster_matrix_cached(SEXP fileSEXP, SEXP seqnamesSEXP, SEXP thresholdsSEXP, SEXP precisionSEXP, SEXP threadsSEXP, SEXP minsplitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type seqnames(seqnamesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type thresholds(thresholdsSEXP);
    Rcpp::traits::input_parameter< const double >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< const int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< const int >::type minsplit(minsplitSEXP);
    rcpp_result_gen = Rcpp::wrap(distmx_cluster_matrix_cached(file, seqnames, thresholds, precision, threads, minsplit));
    return rcpp_result_gen;
END_RCPP
}
// distmx_cluster_pool_uniform
Rcpp::RObject distmx_cluster_pool_uniform(const std::string file, const Rcpp::CharacterVector& seqnames, const float dmin, const float dmax, const float dstep, const std::string output_type);
RcppExport SEXP _optimotu_distmx_cluster_pool_uniform(SEXP fileSEXP, SEXP seqnamesSEXP, SEXP dminSEXP, SEXP dmaxSEXP, SEXP dstepSEXP, SEXP output_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type seqnames(seqnamesSEXP);
    Rcpp::traits::input_parameter< const float >::type dmin(dminSEXP);
    Rcpp::traits::input_parameter< const float >::type dmax(dmaxSEXP);
    Rcpp::traits::input_parameter< const float >::type dstep(dstepSEXP);
    Rcpp::traits::input_parameter< const std::string >::type output_type(output_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(distmx_cluster_pool_uniform(file, seqnames, dmin, dmax, dstep, output_type));
    return rcpp_result_gen;
END_RCPP
}
// distmx_cluster_pool_array
Rcpp::RObject distmx_cluster_pool_array(const std::string file, const Rcpp::CharacterVector& seqnames, const std::vector<double>& thresholds, const std::string output_type);
RcppExport SEXP _optimotu_distmx_cluster_pool_array(SEXP fileSEXP, SEXP seqnamesSEXP, SEXP thresholdsSEXP, SEXP output_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type seqnames(seqnamesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type thresholds(thresholdsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type output_type(output_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(distmx_cluster_pool_array(file, seqnames, thresholds, output_type));
    return rcpp_result_gen;
END_RCPP
}
// distmx_cluster_pool_cached
Rcpp::RObject distmx_cluster_pool_cached(const std::string file, const Rcpp::CharacterVector& seqnames, const std::vector<double>& thresholds, const double precision, const std::string output_type);
RcppExport SEXP _optimotu_distmx_cluster_pool_cached(SEXP fileSEXP, SEXP seqnamesSEXP, SEXP thresholdsSEXP, SEXP precisionSEXP, SEXP output_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type seqnames(seqnamesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type thresholds(thresholdsSEXP);
    Rcpp::traits::input_parameter< const double >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< const std::string >::type output_type(output_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(distmx_cluster_pool_cached(file, seqnames, thresholds, precision, output_type));
    return rcpp_result_gen;
END_RCPP
}
// distmx_cluster_multi_uniform
Rcpp::List distmx_cluster_multi_uniform(const std::string file, const Rcpp::CharacterVector& seqnames, const std::string& output_type, const double dmin, const double dmax, const double dstep, const Rcpp::ListOf<Rcpp::CharacterVector>& preclust, const size_t threads);
RcppExport SEXP _optimotu_distmx_cluster_multi_uniform(SEXP fileSEXP, SEXP seqnamesSEXP, SEXP output_typeSEXP, SEXP dminSEXP, SEXP dmaxSEXP, SEXP dstepSEXP, SEXP preclustSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type seqnames(seqnamesSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type output_type(output_typeSEXP);
    Rcpp::traits::input_parameter< const double >::type dmin(dminSEXP);
    Rcpp::traits::input_parameter< const double >::type dmax(dmaxSEXP);
    Rcpp::traits::input_parameter< const double >::type dstep(dstepSEXP);
    Rcpp::traits::input_parameter< const Rcpp::ListOf<Rcpp::CharacterVector>& >::type preclust(preclustSEXP);
    Rcpp::traits::input_parameter< const size_t >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(distmx_cluster_multi_uniform(file, seqnames, output_type, dmin, dmax, dstep, preclust, threads));
    return rcpp_result_gen;
END_RCPP
}
// distmx_cluster_multi_array
Rcpp::List distmx_cluster_multi_array(const std::string file, const Rcpp::CharacterVector& seqnames, const std::string& output_type, const std::vector<double> thresholds, const Rcpp::ListOf<Rcpp::CharacterVector>& preclust, const size_t threads);
RcppExport SEXP _optimotu_distmx_cluster_multi_array(SEXP fileSEXP, SEXP seqnamesSEXP, SEXP output_typeSEXP, SEXP thresholdsSEXP, SEXP preclustSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type seqnames(seqnamesSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type output_type(output_typeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type thresholds(thresholdsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::ListOf<Rcpp::CharacterVector>& >::type preclust(preclustSEXP);
    Rcpp::traits::input_parameter< const size_t >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(distmx_cluster_multi_array(file, seqnames, output_type, thresholds, preclust, threads));
    return rcpp_result_gen;
END_RCPP
}
// distmx_cluster_multi_cached
Rcpp::List distmx_cluster_multi_cached(const std::string file, const Rcpp::CharacterVector& seqnames, const std::string& output_type, const std::vector<double> thresholds, const double precision, const Rcpp::ListOf<Rcpp::CharacterVector>& preclust, const size_t threads);
RcppExport SEXP _optimotu_distmx_cluster_multi_cached(SEXP fileSEXP, SEXP seqnamesSEXP, SEXP output_typeSEXP, SEXP thresholdsSEXP, SEXP precisionSEXP, SEXP preclustSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type seqnames(seqnamesSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type output_type(output_typeSEXP);
    Rcpp::traits::input_parameter< const std::vector<double> >::type thresholds(thresholdsSEXP);
    Rcpp::traits::input_parameter< const double >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< const Rcpp::ListOf<Rcpp::CharacterVector>& >::type preclust(preclustSEXP);
    Rcpp::traits::input_parameter< const size_t >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(distmx_cluster_multi_cached(file, seqnames, output_type, thresholds, precision, preclust, threads));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_optimotu_distmx_cluster_tree_uniform", (DL_FUNC) &_optimotu_distmx_cluster_tree_uniform, 6},
    {"_optimotu_distmx_cluster_tree_array", (DL_FUNC) &_optimotu_distmx_cluster_tree_array, 4},
    {"_optimotu_distmx_cluster_tree_cached", (DL_FUNC) &_optimotu_distmx_cluster_tree_cached, 5},
    {"_optimotu_distmx_cluster_mtree_uniform", (DL_FUNC) &_optimotu_distmx_cluster_mtree_uniform, 8},
    {"_optimotu_distmx_cluster_mtree_array", (DL_FUNC) &_optimotu_distmx_cluster_mtree_array, 6},
    {"_optimotu_distmx_cluster_mtree_cached", (DL_FUNC) &_optimotu_distmx_cluster_mtree_cached, 7},
    {"_optimotu_confusion_matrix", (DL_FUNC) &_optimotu_confusion_matrix, 3},
    {"_optimotu_distmx_cluster_single", (DL_FUNC) &_optimotu_distmx_cluster_single, 6},
    {"_optimotu_distmx_cluster_multi", (DL_FUNC) &_optimotu_distmx_cluster_multi, 7},
    {"_optimotu_intersect_length", (DL_FUNC) &_optimotu_intersect_length, 2},
    {"_optimotu_intersect_length_string", (DL_FUNC) &_optimotu_intersect_length_string, 2},
    {"_optimotu_inner_fmeasure", (DL_FUNC) &_optimotu_inner_fmeasure, 3},
    {"_optimotu_fmeasure_list", (DL_FUNC) &_optimotu_fmeasure_list, 3},
    {"_optimotu_fmeasure_matrix", (DL_FUNC) &_optimotu_fmeasure_matrix, 3},
    {"_optimotu_mutual_information", (DL_FUNC) &_optimotu_mutual_information, 3},
    {"_optimotu_adjusted_mutual_information", (DL_FUNC) &_optimotu_adjusted_mutual_information, 3},
    {"_optimotu_distmx_cluster_matrix2_uniform", (DL_FUNC) &_optimotu_distmx_cluster_matrix2_uniform, 8},
    {"_optimotu_distmx_cluster_matrix2_array", (DL_FUNC) &_optimotu_distmx_cluster_matrix2_array, 6},
    {"_optimotu_distmx_cluster_matrix2_cached", (DL_FUNC) &_optimotu_distmx_cluster_matrix2_cached, 7},
    {"_optimotu_distmx_cluster_imatrix_uniform", (DL_FUNC) &_optimotu_distmx_cluster_imatrix_uniform, 5},
    {"_optimotu_distmx_cluster_imatrix_array", (DL_FUNC) &_optimotu_distmx_cluster_imatrix_array, 3},
    {"_optimotu_distmx_cluster_imatrix_cached", (DL_FUNC) &_optimotu_distmx_cluster_imatrix_cached, 4},
    {"_optimotu_distmx_cluster_matrix_uniform", (DL_FUNC) &_optimotu_distmx_cluster_matrix_uniform, 7},
    {"_optimotu_distmx_cluster_matrix_array", (DL_FUNC) &_optimotu_distmx_cluster_matrix_array, 5},
    {"_optimotu_distmx_cluster_matrix_cached", (DL_FUNC) &_optimotu_distmx_cluster_matrix_cached, 6},
    {"_optimotu_distmx_cluster_pool_uniform", (DL_FUNC) &_optimotu_distmx_cluster_pool_uniform, 6},
    {"_optimotu_distmx_cluster_pool_array", (DL_FUNC) &_optimotu_distmx_cluster_pool_array, 4},
    {"_optimotu_distmx_cluster_pool_cached", (DL_FUNC) &_optimotu_distmx_cluster_pool_cached, 5},
    {"_optimotu_distmx_cluster_multi_uniform", (DL_FUNC) &_optimotu_distmx_cluster_multi_uniform, 8},
    {"_optimotu_distmx_cluster_multi_array", (DL_FUNC) &_optimotu_distmx_cluster_multi_array, 6},
    {"_optimotu_distmx_cluster_multi_cached", (DL_FUNC) &_optimotu_distmx_cluster_multi_cached, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_optimotu(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
