CXX_STD = CXX17
PKG_CPPFLAGS = -DOPTIMOTU_R -I./WFA2-lib -I./SneakySnake -I./edlib
PKG_CXXFLAGS += -DRCPP_PARALLEL_USE_TBB=1
PKG_LIBS += $(shell "${R_HOME}/bin${R_ARCH_BIN}/Rscript.exe" -e "RcppParallel::RcppParallelLibs()")

SOURCES=AlignClusterWorker.cpp AllPairGenerator.cpp ClusterAlgorithmFactory.cpp ClusterIndexedMatrix.cpp ClusterMatrix.cpp ClusterSLINK.cpp ClusterTree.cpp ClusterWorker.cpp DistanceConverter.cpp EdlibClusterWorker.cpp EdlibFilter.cpp HammingClusterWorker.cpp HybridClusterWorker.cpp KmerPairGenerator.cpp MultipleClusterAlgorithm.cpp RcppExports.cpp SneakySnakeFilter.cpp SparseDistanceMatrix.cpp WavefrontFilter.cpp Wfa2ClusterWorker.cpp config.cpp confusion_matrix.cpp distmx_cluster.cpp edlib_dist_matrix.cpp hybrid_dist_matrix.cpp intersect.cpp kmer.cpp mutual_information.cpp pad_strings.cpp pairwise_alignment.cpp prealign_dist_matrix.cpp seq_cluster.cpp sneakysnake_dist_matrix.cpp  WFA2-lib/bindings/cpp/WFAligner.cpp edlib/edlib.cpp
CSOURCES=SneakySnake/SneakySnake.c SneakySnake/kthread.c WFA2-lib/alignment/affine2p_penalties.c WFA2-lib/alignment/affine_penalties.c WFA2-lib/alignment/cigar.c WFA2-lib/alignment/score_matrix.c WFA2-lib/system/mm_allocator.c WFA2-lib/system/mm_stack.c WFA2-lib/system/profiler_counter.c WFA2-lib/system/profiler_timer.c WFA2-lib/utils/bitmap.c WFA2-lib/utils/commons.c WFA2-lib/utils/dna_text.c WFA2-lib/utils/heatmap.c WFA2-lib/utils/sequence_buffer.c WFA2-lib/utils/vector.c WFA2-lib/wavefront/wavefront.c WFA2-lib/wavefront/wavefront_align.c WFA2-lib/wavefront/wavefront_aligner.c WFA2-lib/wavefront/wavefront_attributes.c WFA2-lib/wavefront/wavefront_backtrace.c WFA2-lib/wavefront/wavefront_backtrace_buffer.c WFA2-lib/wavefront/wavefront_backtrace_offload.c WFA2-lib/wavefront/wavefront_bialign.c WFA2-lib/wavefront/wavefront_bialigner.c WFA2-lib/wavefront/wavefront_components.c WFA2-lib/wavefront/wavefront_compute.c WFA2-lib/wavefront/wavefront_compute_affine.c WFA2-lib/wavefront/wavefront_compute_affine2p.c WFA2-lib/wavefront/wavefront_compute_edit.c WFA2-lib/wavefront/wavefront_compute_linear.c WFA2-lib/wavefront/wavefront_debug.c WFA2-lib/wavefront/wavefront_display.c WFA2-lib/wavefront/wavefront_extend.c WFA2-lib/wavefront/wavefront_extend_kernels.c WFA2-lib/wavefront/wavefront_extend_kernels_avx.c WFA2-lib/wavefront/wavefront_heuristic.c WFA2-lib/wavefront/wavefront_pcigar.c WFA2-lib/wavefront/wavefront_penalties.c WFA2-lib/wavefront/wavefront_plot.c WFA2-lib/wavefront/wavefront_sequences.c WFA2-lib/wavefront/wavefront_slab.c WFA2-lib/wavefront/wavefront_termination.c WFA2-lib/wavefront/wavefront_unialign.c routines_sequence.c

# Obtain the object files
OBJECTS=$(SOURCES:.cpp=.o) $(CSOURCES:.c=.o)

# Make the shared object
all: $(SHLIB)

# Provide recipe to remove all objects
clean:
	@rm -f $(OBJECTS)
