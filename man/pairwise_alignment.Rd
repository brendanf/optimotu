% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R, R/align.R
\name{cigar_wfa2_extend}
\alias{cigar_wfa2_extend}
\alias{cigar_edlib_global}
\alias{cigar_edlib_extend}
\alias{align_wfa2_global}
\alias{align_wfa2_extend}
\alias{align_edlib_global}
\alias{align_edlib_extend}
\alias{align}
\alias{cigar_wfa2}
\title{Align two sequences and return the pairwise distance or CIGAR string}
\usage{
cigar_wfa2_extend(
  a,
  b,
  match = 0L,
  mismatch = 1L,
  gap_open = 0L,
  gap_extend = 1L,
  gap_open2 = 0L,
  gap_extend2 = 1L
)

cigar_edlib_global(a, b)

cigar_edlib_extend(a, b)

align_wfa2_global(
  a,
  b,
  match = 0L,
  mismatch = 1L,
  gap_open = 0L,
  gap_extend = 1L,
  gap_open2 = 0L,
  gap_extend2 = 0L
)

align_wfa2_extend(
  a,
  b,
  match = 0L,
  mismatch = 1L,
  gap_open = 0L,
  gap_extend = 1L,
  gap_open2 = 0L,
  gap_extend2 = 0L
)

align_edlib_global(a, b)

align_edlib_extend(a, b)

align(
  a,
  b,
  match = 0,
  mismatch = 1,
  gap_open = 0,
  gap_extend = 1,
  gap_open2 = 0,
  gap_extend2 = 0,
  method = c("wfa2", "edlib"),
  span = c("global", "extend")
)

cigar_wfa2(
  a,
  b,
  match = 0,
  mismatch = 1,
  gap_open = 0,
  gap_extend = 1,
  gap_open2 = 0,
  gap_extend2 = 0,
  span = c("global", "extend")
)
}
\arguments{
\item{a}{(\code{character} string) first string to align}

\item{b}{(\code{character} string) second string to align}

\item{match}{(\code{integer} scalar) match score; positive is a bonus.}

\item{mismatch}{(\code{integer} scalar) mismatch score; positive is a penalty.}

\item{gap_open}{(\code{integer} scalar) per-gap opening score; positive is a penalty.
This penalty is applied once per run of consecutive gap characters}

\item{gap_extend}{(\code{integer} scalar) gap extension score; positive is a penalty.
This penalty is applied for each gap character. This is the appropriate
parameter to use for a linear gap penalty.}

\item{gap_open2}{(\code{integer} scalar) alternate gap opening score for two-piece
affine gap penalty; positive is penalty.}

\item{gap_extend2}{(\code{integer} scalar) alternate gap extension score for
two-piece affine gap penalty; positive is penalty.}

\item{method}{(\code{character} scalar) alignment method to use; one of "wfa2"
or "edlib".}

\item{span}{(\code{character} scalar) alignment span; one of "global" or "extend".
In "global" mode, the entire sequences are aligned and end gaps are penalized.
"extend" mode is slightly between methods: in both cases, left end gaps are
penalized. For WFA2, right end gaps in both sequences are not penalized.
For Edlib, right end gaps in the \emph{second} sequence are not penalized, but
end gaps in the \emph{first} sequence are penalized.}
}
\value{
(\code{character(1)}) CIGAR string
}
\description{
While Edlib only calculates the edit distance, WFA2 allows
several alignment strategies, and this function selects the least
parameterized version possible given the inputs:
\itemize{
\item Edit : \code{gap_extend} == \code{mismatch} != 0; \code{match} == \code{gap_open} ==
\code{gap_open2} == \code{gap_extend2} == 0.
\item Indel : \code{gap_extend} != 0; \code{mismatch} == \code{match} == \code{gap_open} ==
\code{gap_open2} == \code{gap_extend2} == 0.
\item GapLinear : \code{gap_open} == \code{gap_open2} == \code{gap_extend2} == 0; other
parameters do not meet requirements for "Edit" or "Indel".
\item GapAffine : \code{gap_open2} == \code{gap_extend2} == 0; other parameters do not
meet requirements for "Edit", "Indel", or "GapLinear".
\item GapAffine2Pieces : parameters do not meet requirements for \code{Edit},
\code{Indel}, \code{GapLinear}, or \code{GapAffine}.
}
}
\section{Functions}{
\itemize{
\item \code{cigar_wfa2_extend()}: Compute pairwise extension alignment CIGAR with WFA2

\item \code{cigar_edlib_global()}: Compute pairwise global alignment CIGAR with Edlib

\item \code{cigar_edlib_extend()}: Compute pairwise extension alignment CIGAR with Edlib

\item \code{align_wfa2_global()}: Compute pairwise alignment distance with WFA2

\item \code{align_wfa2_extend()}: Compute pairwise alignment distance with WFA2

\item \code{align_edlib_global()}: Compute pairwise  global alignment distance with Edlib

\item \code{align_edlib_extend()}: Compute pairwise extension alignment distance with Edlib

\item \code{cigar_wfa2()}: Generate alignment CIGAR with WFA2

}}
\keyword{internal}
